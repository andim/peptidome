ks = list(range(3, 12, 1))
fit_params = dict(niter=200, stepsize=0.01, nsteps=1e7, nburnin=1e3, nsample=10)
proteomes = [#'Humannozf',
             'Human', 'Mouse', 'Chicken', 'Zebrafish', 'Malaria', 'Tuberculosis', 'Listeria', 'StrepA', 'Humanviruses']

rule all:
    input:
#        expand('plots/Humannozf_{model}_k{k}_observables.png',
#               model=['train', 'independent', 'ncov', 'nskew', 'nskewfcov'],
#               k=ks),
#        expand('plots/Humannozf_k{k}_dos.png',
#               k=ks),
#        expand('plots/Humannozf_k{k}_entropies.png',
#               k=ks),
        'plots/maxent.svg',
        expand('plots/{proteome}_{model}_k9_observables.png',
               proteome=proteomes,
               model=['train', 'independent', 'ncov', 'nskew', 'nskewfcov']),
        expand('plots/{proteome}_k9_dos.png',
               proteome=proteomes),
        expand('plots/{proteome}_k9_entropies.png',
               proteome=proteomes),
        expand('data/{proteome}_{model}_k9_dkl.csv',
               proteome=proteomes[2:],
               model=['independent', 'ncov', 'nskew', 'nskewfcov']),

rule traintest:
    input:
        expand('plots/{proteome}_train_k9_observables.png',
               proteome=proteomes)

rule train_test:
    output:
        'data/{proteome}_train_k{k}_matrix.csv.gz',
        'data/{proteome}_test_k{k}_matrix.csv.gz',
    script:
       'generate_reference_matrices.py' 

rule fit_independent:
    input:
        'data/{proteome}_train_k{k}_matrix.csv.gz'
    output:
        'data/{proteome}_independent_k{k}_matrix.csv.gz',
        'data/{proteome}_independent_k{k}_params.npz',
    script:
        'fit_independent.py'

rule fit_ncov:
    input:
        'data/{proteome}_train_k{k}_matrix.csv.gz'
    output:
        'data/{proteome}_ncov_k{k}_matrix.csv.gz',
        'data/{proteome}_ncov_k{k}_params.npz',
    params:
        fit=fit_params
    script:
        'fit_ncov.py'

rule fit_nskew:
    input:
        'data/{proteome}_train_k{k}_matrix.csv.gz',
        'data/{proteome}_ncov_k{k}_params.npz'
    output:
        'data/{proteome}_nskew_k{k}_matrix.csv.gz',
        'data/{proteome}_nskew_k{k}_params.npz',
    params:
        fit=fit_params
    script:
        'fit_nskew.py'

rule fit_nskewfcov:
    input:
        'data/{proteome}_train_k{k}_matrix.csv.gz',
        'data/{proteome}_nskew_k{k}_params.npz'
    output:
        'data/{proteome}_nskewfcov_k{k}_matrix.csv.gz',
        'data/{proteome}_nskewfcov_k{k}_params.npz',
    params:
        fit=fit_params
    script:
        'fit_nskewfcov.py'

rule evaluate_observables:
    input:
        'data/{proteome}_{model}_k{k}_matrix.csv.gz'
    output:
        'data/{proteome}_{model}_k{k}_observables.npz'
    script:
        'evaluate_observables.py'

rule evaluate_energies:
    input:
        'data/{proteome}_{model}_k{k}_matrix.csv.gz',
        'data/{proteome}_nskewfcov_k{k}_params.npz'
    output:
        'data/{proteome}_{model}_k{k}_energies.npz'
    script:
        'evaluate_energies.py'

rule evaluate_entropies:
    input:
        'data/{proteome}_{model}_k{k}_params.npz'
    output:
        'data/{proteome}_{model}_k{k}_entropy.csv'
    script:
        'evaluate_entropies.py'

rule evaluate_coincidences:
    input:
        expand('data/{{proteome}}_{model}_k{{k}}_energies.npz',
               models = ['independent', 'ncov', 'nskew', 'nskewfcov', 'train']),
        expand('data/{{proteome}}_{model}_k{{k}}_entropy.csv',
               models = ['independent', 'ncov', 'nskew', 'nskewfcov', 'train']),
    output:
        'data/{proteome}_k{k}_coincidences.csv'
    script:
        'evaluate_coincidences.py'

rule evaluate_dkls:
    input:
        'data/{proteome}_{model}_k{k}_params.npz',
        'data/{proteome}_{model}_k{k}_entropy.csv',
        'data/{proteome}_{model}_k{k}_matrix.csv.gz',
        'data/Human_{model}_k{k}_params.npz',
        'data/Human_{model}_k{k}_entropy.csv',
        'data/Human_{model}_k{k}_matrix.csv.gz',
    output:
        'data/{proteome}_{model}_k{k}_dkl.csv'
    params:
        reference='Human'
    script:
        'evaluate_dkls.py'

rule plot_observables:
    input:
        'data/{proteome}_test_k{k}_observables.npz',
        'data/{proteome}_{model}_k{k}_observables.npz'
    output:
        'plots/{proteome}_{model}_k{k}_observables.png'
    script:
        'plot_observables.py'

rule plot_dos:
    input:
        expand('data/{{proteome}}_{model}_k{{k}}_energies.npz',
            model = ['test', 'independent', 'ncov', 'nskew', 'nskewfcov']),
    output:
        'plots/{proteome}_k{k}_dos.png'
    script:
        'plot_dos.py'

rule plot_entropy:
    input:
        expand('data/{{proteome}}_{model}_k{{k}}_entropy.csv',
            model = ['independent', 'ncov', 'nskew', 'nskewfcov']),
    output:
        'plots/{proteome}_k{k}_entropies.png'
    script:
        'plot_entropies.py'

rule plot_maintext:
    input:
        'data/Human_test_k9_observables.npz',
        'data/Human_nskewfcov_k9_observables.npz',
        expand('data/Human_{model}_k9_energies.npz',
            model = ['test', 'independent', 'ncov', 'nskew', 'nskewfcov']),
        expand('data/Human_{model}_k9_entropy.csv',
            model = ['independent', 'ncov', 'nskew', 'nskewfcov']),
        'data/Human_k9_coincidences.csv',
    output:
        'plots/maxent.svg'
    script:
        'plot_maintext.py'
